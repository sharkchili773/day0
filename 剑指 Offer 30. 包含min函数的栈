定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。

 

示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.min();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.min();   --> 返回 -2.
 

提示：

各函数的调用总次数不超过 20000 次

class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.A = []
        self.B = []
     


    def push(self, x: int) -> None: ##输入
        self.A.append(x)
        if not self.B:
            self.B.append(x)
        elif not x > self.B[-1]: ##直接把min放到B里
            self.B.append(x)


    def pop(self) -> None:
        if self.A.pop() == self.B[-1]: ## 弹出A， 如果B是min那也弹出B（如果弹出的值在B里就弹出B）
            self.B.pop()


    def top(self) -> int: ## 找到最后一个A
        if self.A:
            return self.A[-1]
        else:
            return -1


    def min(self) -> int: ##找到最小值
        if self.B:
            return self.B[-1]
        else:
            return -1
